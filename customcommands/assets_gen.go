// Code generated by "esc -o assets_gen.go -pkg customcommands -ignore .go assets/"; DO NOT EDIT.

package customcommands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/customcommands.html": {
		local:   "assets/customcommands.html",
		size:    7592,
		modtime: 1517927637,
		compressed: `
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
cUqHoctG/wkAAP//lkCg3qgdAAA=
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    991,
		modtime: 1515404254,
		compressed: `
H4sIAAAAAAAC/2xTy27bQAy86yvm1sRwontuafq4Fm2BoggCmNZS0iKrpbqk/Pj7YrWKGhc+GSZndoZD
6mlSkwGNDANFp6AQ5IizTDBBk5iM878EOcYVtYX1jOaCCj2r8QAf8fvx67dPH+EVKgMfe7IMGgOfkIEN
RewZk7JDK2kGgdyBYsMOalPbbrGfDBKbWRxqlAyR2fnY4cDpfPHgypWRE5mXqIXWyxQcElMIZ1jv4yto
L5NhoNf8khpFR0EiYy82m/F2X1WPIfw3naInBcGS7zpOOQCvecJ5uqWqV2IpUTnftpw4rlDYeWQFJX6o
Ktxhs3kq+M3mAb+89UXgnRxjYFXqeHZisoRyLFhe1zAmbv1pnmXem3I6cMLN7m6H/RmOW5qC3aKVvGl2
uZj51NhE4U2xePqRJXTWmH31HEGrD/3XLVIX3CeJRj7qFWKztK6wPp+oyeux5poi/5koXKN9545PmfDz
XWrllvXtmCdlEFJGYiQzTrHkWkocOx+Xq/SK504+aGmNLze92agPdd1JoNjdS+rq8bWrS7u+3cK32DWk
DOWo3vyBd/mVKAZlW76X3PdxRaAN1GUUOccuW8yoN/PLAquq+iIJgySGYyMfdAtlnrHPxsMYyPItO2n0
5abOP/VSZr39GwAA//9iIgf23wMAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
