// Code generated by "esc -o assets_gen.go -pkg customcommands -ignore .go assets/"; DO NOT EDIT.

package customcommands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/customcommands.html": {
		local:   "assets/customcommands.html",
		size:    12301,
		modtime: 1519842356,
		compressed: `
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
M7camnL0nwAAAP//AaoiTA0wAAA=
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    991,
		modtime: 1519494558,
		compressed: `
H4sIAAAAAAAC/2xTy27bQAy86yvm1sRwontuafq4Fm2BoggCmNZS0iKrpbqk/Pj7YrWKGhc+GSZndoZD
6mlSkwGNDANFp6AQ5IizTDBBk5iM878EOcYVtYX1jOaCCj2r8QAf8fvx67dPH+EVKgMfe7IMGgOfkIEN
RewZk7JDK2kGgdyBYsMOalPbbrGfDBKbWRxqlAyR2fnY4cDpfPHgypWRE5mXqIXWyxQcElMIZ1jv4yto
L5NhoNf8khpFR0EiYy82m/F2X1WPIfw3naInBcGS7zpOOQCvecJ5uqWqV2IpUTnftpw4rlDYeWQFJX6o
Ktxhs3kq+M3mAb+89UXgnRxjYFXqeHZisoRyLFhe1zAmbv1pnmXem3I6cMLN7m6H/RmOW5qC3aKVvGl2
uZj51NhE4U2xePqRJXTWmH31HEGrD/3XLVIX3CeJRj7qFWKztK6wPp+oyeux5poi/5koXKN9545PmfDz
XWrllvXtmCdlEFJGYiQzTrHkWkocOx+Xq/SK504+aGmNLze92agPdd1JoNjdS+rq8bWrS7u+3cK32DWk
DOWo3vyBd/mVKAZlW76X3PdxRaAN1GUUOccuW8yoN/PLAquq+iIJgySGYyMfdAtlnrHPxsMYyPItO2n0
5abOP/VSZr39GwAA//9iIgf23wMAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
