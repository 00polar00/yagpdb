// Code generated by "esc -o assets_gen.go -pkg moderation -ignore .go assets/"; DO NOT EDIT.

package moderation

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    996,
		modtime: 1515404254,
		compressed: `
H4sIAAAAAAAC/3RTTW/TQBC991e8I6gpLdeeqJDggLggJIQQUifesb3qesfamU3if49m7USkgks+7J33
NW+/j4xJAheyKBk9k9XCioWGOewxFznEwAoq/Hhzgzt8lZBkgI1kSDIoKCXYNQp1/qXt8V4MRi+suAGA
W9gYFRMt2DMKT3LggJjb2b46uf/r6SAF0oNqiI0IUyxFSszDbR+Tsf9yPZ85Oy0HTKxKA6+qXEVeXNSm
ZmP/JAV8omlO/IjYY5GKqtzon+/2lPFBZWLJjD3HPECtzjE8o5Npohz8YL4YO8aUQEkFayaMRGp4//Bw
VqNnb91IOfMa1RnrSAo+cVeNww584IyYu1SDEwdO/JctdbNfYvcCn3ShG4o2Z7jFU7JR6jDunEO5Zdy0
/S/oHaQgi7UBDP8Osi8yXRmICjX3XZX7mtK71opqfNGhGodt+1M1RpHE6KWAYDzNUqgsCHUty3nqp1SM
dGCYQNlQ51cAi9SinHqn+5iY8r1/lvP8t+ZQ1wWcLqntcGkL9otrLr52nbmLfeTgaD+o5JgHvTaAcw+O
22scx9iNfhNghboXDo64VWHNkKrJdg+kOJmudXfzpSZWHKMvyVo555qjjhNn0xbir6cMPhlnjYdXWCt8
kG7F2t41LUm6trWRC/9+c+9n7q9m3/4JAAD//xYSEVLkAwAA
`,
	},

	"/assets/moderation.html": {
		local:   "assets/moderation.html",
		size:    11871,
		modtime: 1518487396,
		compressed: `
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
AAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
