// Code generated by "esc -o assets_gen.go -pkg moderation -ignore .go assets/"; DO NOT EDIT.

package moderation

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    996,
		modtime: 1521566047,
		compressed: `
H4sIAAAAAAAC/3RTTW/TQBC991e8I6gpLdeeqJDggLggJIQQUifesb3qesfamU3if49m7USkgks+7J33
NW+/j4xJAheyKBk9k9XCioWGOewxFznEwAoq/Hhzgzt8lZBkgI1kSDIoKCXYNQp1/qXt8V4MRi+suAGA
W9gYFRMt2DMKT3LggJjb2b46uf/r6SAF0oNqiI0IUyxFSszDbR+Tsf9yPZ85Oy0HTKxKA6+qXEVeXNSm
ZmP/JAV8omlO/IjYY5GKqtzon+/2lPFBZWLJjD3HPECtzjE8o5Npohz8YL4YO8aUQEkFayaMRGp4//Bw
VqNnb91IOfMa1RnrSAo+cVeNww584IyYu1SDEwdO/JctdbNfYvcCn3ShG4o2Z7jFU7JR6jDunEO5Zdy0
/S/oHaQgi7UBDP8Osi8yXRmICjX3XZX7mtK71opqfNGhGodt+1M1RpHE6KWAYDzNUqgsCHUty3nqp1SM
dGCYQNlQ51cAi9SinHqn+5iY8r1/lvP8t+ZQ1wWcLqntcGkL9otrLr52nbmLfeTgaD+o5JgHvTaAcw+O
22scx9iNfhNghboXDo64VWHNkKrJdg+kOJmudXfzpSZWHKMvyVo555qjjhNn0xbir6cMPhlnjYdXWCt8
kG7F2t41LUm6trWRC/9+c+9n7q9m3/4JAAD//xYSEVLkAwAA
`,
	},

	"/assets/moderation.html": {
		local:   "assets/moderation.html",
		size:    13832,
		modtime: 1525808768,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
