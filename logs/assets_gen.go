// Code generated by "esc -o assets_gen.go -pkg logs -ignore .go assets/"; DO NOT EDIT.

package logs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/control_panel.html": {
		local:   "assets/control_panel.html",
		size:    6093,
		modtime: 1518284137,
		compressed: `
H4sIAAAAAAAC/+xYTY/bNhO+76+Yl28PCRBJSNFTIKvY7qZBgGQbIGmBngJKHEnEUqRAUnYMQf+9ICl5
7V3Z1uYDSIv4YFHizDPkcD7Z9wxLLhFI0X4Uqqq4rMgwXFz0vcWmFdSGqRopIxAPw0XK+BoKQY1ZEa02
JLsAANj/WigRiSp6/vM45+fr59N0SyuMHB5qkr0JItOkfr5H3GZvqaQVQoPGuKdQlQEqGayp5qozoGyN
GmzNZWViePKh5ga4kRY2NWqEnMpAf8uLWwNUe4gK2TPYqg4KKsGgBVtTC10LnWQeDaFRDDW1XEmwNH8a
p0k7bjBhfD0O/xdFkMS7bUIUZRfj/D21UYHamlFxgU2rTWD4PD3uzbdUogD/HzEsaSfsHuUstde7O+JD
Ovd7hRI1FU4v1mn1EOhu98exc8W2M8BpqXQDWglcETck0KCtFVuRVhk7w3Af/U475yhHjf1ygvwBS43F
ba4+nWEBSAXNUZyjAki5bDsLdtviHjpI2uCK/GlQu9Fo9i8lzQUyAn3PS4ivlCx5Fc8TDQN4NGR9j5IN
w/mlBM6EceOe0I24MPp5muvkPMjfo7944UA9ihm9aQdpYMNt7T1oUytuoFBNQyWLl8nYP5DcRAUVQnUW
7oYRl6UiWZpnN8riizTJM3hdjmtx3q0kUBmCgkG9Rn23oFxZNz2+cwMYFPrMzUr3x/XBRoSAfIoXgGuU
wEsfNiZFcg+4Vd0kLGxzxklmtpossKMzSOem/00eccOL27MeMU/05R4hR9yv6BET5Bd5xPdvJC6QR5VW
XUsWGEDYzW+CFreCGwtFTaVEYaDUqjlI8tPOF8YNgwILOy2q6YTl4RMBzlYknyRGk8TJ7HZrQXa1m/L8
rctT02jB5tyv75sPd2k/4H1UrSsjzEePRYDcyYkvC8vX+KrjgsXTZyDv/codD9lZ/juqDbK91U4bGYbz
2kmCLr6VGZ2a+m+m71CVvg32aq6o/Ivj5hoF2gch6xTpZwSuSyHUBhpschdrfGhJC8VwKpQnQWniv0KL
uuHGOGMCq2DNcQMsSJ/8zfzIVI86/Jdr1Fsl8eSxzxN99oHjCPednuG3igAHLc8sT95Z63o0f1Kmyxtu
ya6CtBJyKyPTFQUa48ei8o9cqOKWQPaertGpGN6P3U6aBMQMAL6iJtLEJcrsVC91/zV0iaG3c33iV+78
oBBIdcnnnOZdlwteHDbdTsmuaB6r6otTp9d2QkSaV7UlmfcKqSzEv3Nt7Dta4TCkFGqN5Yr8SkuLetX3
8Q1u0Nhh2J2epOtIcHkLu2Ns/KPVvKF6SzLHodOEZqMvpXQp6yQ8x1JpdNL/ECxIz9zIo861uqe7X+tq
yUijaZU0fD1XNKSe5oDhWONr9QlXsXX2+jpNbH2a5kojtcjOE152tlZ6AWCoOhYAhgLmOGGaHNtg3/9U
wYvVYXX0+vpIodP3msoKIX6jqmPF0Bldsuz/fe8lpIllpyn73jkytR94gxCP+r20y1jjoOZhgCe7Fyf2
6Xlmt8JR+Te0wSXyTgdOfxmz4AJmJi2O1ltzxlCSMfZa/GSnDMkZgTUVHa7IqFgCySOz7hTLvbq9Ma1I
2QkREt/DGB88nDlb0Dvp1yPxEuH0COS9oJG0PjgmzkqHIXGxMZk2mblU72LHmTT7MBfc8wz2eJ/xIXAm
7/gYkz3+Eq9UyqI+lSWcw8HbLTRU/sgGy/L3wsvjwxvifZkP7uPDMYWL5YvJCv4JAAD//5g93wTNFwAA
`,
	},

	"/assets/log_view.html": {
		local:   "assets/log_view.html",
		size:    5244,
		modtime: 1515404254,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
