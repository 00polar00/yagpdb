// Code generated by "esc -o assets_gen.go -pkg logs -ignore .go assets/"; DO NOT EDIT.

package logs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/control_panel.html": {
		local:   "assets/control_panel.html",
		size:    6096,
		modtime: 1528376716,
		compressed: `
H4sIAAAAAAAC/+xYX4vcOBJ/n09RpztIArFNjnsKbh+zM9kQSGYDyS7sU5Ctsi1Glowkd6cx/u6LJLun
e8bd7ckfyC7ph7ZsVf1KKtVf9T3DkksEUrSfhKoqLisyDBcXfW+xaQW1YapGygjEw3CRMr6GQlBjVkSr
DckuAAD2vxZKRKKKXvx3nPPz9YtpuqUVRg4PNcneBpFpUr/YI26zd1TSCqFBY9xTqMoAlQzWVHPVGVC2
Rg225rIyMTz9WHMD3MgnFjY1aoScysBwy4tbA1R7jArZc9iqDgoqwaAFW1MLXQudZB4OoVEMNbVcSbA0
fxanSTvuMGF8PQ7/FUWQxLt9QhRlF+P8Pb1RgdqaUXOBTatNYPgyRe7Nt1SiAP8fMSxpJ+we5Sy1V7w7
40M693uNEjUVTi/WqfUQ6G73x7FzxbYzwGmpdANaCVwRNyTQoK0VW5FWGTvDcB/9TjvnKEeN/e8E+QOW
GovbXH0+wwKQCpqjOEcFkHLZdhbstsU9dJC0wRX53aB2o9HuX0maC2QE+p6XEF8pWfIqnicaBvBoyPoe
JRuG80sJnAnjxj2hG3FhdPQ018l5kD9Hf/HCgXqUJ2Z0px2mgQ23tXehTa24gUI1DZUsXiZk/0RyExVU
CNVZuBtGXJaKZGme3SiLL9Mkz+BN6cUH91YSqAxhwaBeo75bUK6smx7fuQEMGn3uZqX74/pgI0JAPgUM
wDVK4KWPG5MmuQfcqm4SFrY54yUzW00WGNIZpHPTfyeXuOHF7VmXmCf6epeQI+63dIkJ86tc4se3EhfK
o0qrriULLCDs5hdBi1vBjYWiplKiMFBq1Rzk+WnnCwOHQYGFnRbVdMLy8IkAZyuSTxKjSeJkd7u1ILva
TXn+1mWqabRgc+7X983Hu8Qf8D6p1hUS5pPHIkDu5MSXheVrfN1xweLpM5APfuWOh+xM/z3VBtneaqeN
DMN57SRBF9/LjE5N/TMTeChM3wV7NVdU/sFxc40C7YOYdYr0CyLXpRBqAw02uUt5PrSkhWI41cqToDTx
X6FF3XBjnDGBVbDmuAEWpE/+Zn6mqkcd/qs16q2SePLY54m++MBxhPtBz/B7RYCDpmeWJ++sdV2aPynT
5Q23ZFdCWgm5lZHpigKN8WNR+UcuVHFLIPtA1+hUDB/GfidNAmIGAN9QE2niEmV2qpu6/xr6xNDduU7x
G/d+UAikuuRzTvO+ywUvDvtup2RXNY9l9cWp02s7ISLNq9qSzHuFVBbiX7k29j2tcBhSCrXGckX+T0uL
etX38Q1u0Nhh2J2epOtIcHkLu2Ns/KPVvKF6SzLHodOEZqMvpXQp6yQ8x1JpdNJ/EyxIz9zIo841u6f7
X+uKyUijaZU0fD1XNKSe5oDhWOtr9QlXsXX25jpNbH2a5kojtcjOE152tlZ6AWCoOhYAhgLmOGGaHNtg
3/+ngperw+rozfWRQqfvNZUVQvxWVceKoTO6ZNm/+95LSBPLTlP2vXNkaj/yBiEe9Xtpl7HGQc3DAE93
L07ss/PMboWj8m9og0vknQ6c/jpmwRXMTFocrbfmjKEkY+y1+NlOGZIzAmsqOlyRUbEEkkdm3SmWe3V7
Y1qRshMiJL6HMT54OHO2oHfSr0fiJcLpEch7QSNpfXBMnJUOQ+JiYzJtMnOp3sWOM2n2YS645xns8T7j
Q+BM3vExJnv8NV6plEV9Kks4h4N3W2io/JkNluXvhdfHh3fE+zIfXMmHYwpXyxeTFfwVAAD//4LETr/Q
FwAA
`,
	},

	"/assets/log_view.html": {
		local:   "assets/log_view.html",
		size:    5349,
		modtime: 1528465847,
		compressed: `
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
fXOfvOldMKDufrtsJ5P/BAAA//9Tk/vE5RQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
