// Code generated by "esc -o assets_gen.go -pkg rolecommands -ignore .go assets/"; DO NOT EDIT.

package rolecommands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/help.md": {
		local:   "assets/help.md",
		size:    1952,
		modtime: 1527169000,
		compressed: `
H4sIAAAAAAAC/2xVTW/jRgy961e8bA5tAcdAmlsuxfYD6SWLxSaXvZmWKGk2o6E6M7Kif1+QIzmJsTfB
FvkeH9+jnti3oJRcF+joGVE8J/wq0Z5QyzBQaBIoIfe8gCKjJu+5gQTk3iUcJf8GZ/+Djs67vNhz506M
RaaYFKM0bqMMIDTcusANvEt5p71lHCVxgyxoXOQ6+0XrXeggU8anRwrUMb5pk0/7qvr++eHr33+CfBL0
lEDwkiEtZMxOQlJc1BQwJdamkVOOrs6g0KCLMo2YRmNpvPZVdX19jeee0bi25cghY5CGE/h19KRkqwq3
e3yRwPd41rn1fzTCCUFyb1RzzxG5p4C65/oF1JELKRc5FDUh8n+Ti9wYE9cF0WcjsftIWiFaiaVOu0+j
qflxMfsKv+/x5ELnjRcv1kGCX9DTiXFb3nfhjcS+wt0ej5PPbtSq7yts4sL00QU3TIMxfKRXe5Ztg4SB
hyNHqzCED61RlPznlYbRM6ZEHd9XT7TYcPY+IXE8ccTsco87tFSXnSneTCFjZNHiLDiqpcpjMalCuQiZ
w1aHuedQzPlDXNjjuaeckJwR4CBT14O8x8wFXz0mcOm+qnCDvyJTZpvgroz47te7ixToPnIvabVNVX2R
GXziuEhgU+SN5ZDYn0ywleiVrieyRoVQy6T0XEoTp6KEbTxxNmMq6/tiuW09a+tzogaJXMx2u0GYGb4W
9bSkjcx+wY9pGHHkPDOfZUtV9Sxo3atyTYwxytHzkFQmLa2LAoTAMx4sMStLLs4/FNMdbG1vY2OMfHIy
pQvpsijXvNnkQdtfQfVbAd9b9qzYvzLbnzMjiT+xjaJhuJxGocMfZ624XDPlc/hWEvcuCcbhoFpnF7od
gszFQDWFXzIiD3LaTuF7d+9s1u3NQnag159lbIcned/TVkBRJhUrLLq7K8uK3TQ8cpiq6nm9Rxg4TBjo
RfEzRknJrSkwzDUfq+iF53EBNY1KE/msiVhck4Zwb/vWiE8j6A1mV64ge8rbIbKLuoavacpVpm0s1dmy
7MJJXorE65Jx0HLjnnu+sYKbQAPfqO8PVfW5zRr73tW9tZid94qS6cUiHC2r2rHEYIxSc9LrrMocJW/X
M2EoH4R1uISR41AuSOLQXP6+bqbuKQT26wXQvO1AGZ4p5TXbK/QOZFylXem6XNiaSwOrVEyXOCvR8n2x
kCih8lXYvkC2mJS1F42jX0owLtx23s7+/wAAAP//K0AiP6AHAAA=
`,
	},

	"/assets/schema.sql": {
		local:   "assets/schema.sql",
		size:    1650,
		modtime: 1527169000,
		compressed: `
H4sIAAAAAAAC/6RT0Y6bMBB8xl/hRyLlD+6JI74KNSEVodKdqsryhT26FfZSsNWoX19BQ0JyTkJ6b5Zn
7N2dmX0Un5L0gbE4E1EueB49LgVPnni6zrl4Tjb5hjdUgSwbcnXLQxZgwV+xbKFBVfW09Otyyb9kySrK
Xvhn8TJnQemwKuQ/Jhp7oM1ZYJQGbmF3ctnAL4cNyK5Uu3/07fucBVga8t1rKsDzuXaVxboCqdXuKozG
A7doygqkcpakpbI709sbfyWqQBkPc2ibDLxjsdlR1SRdiOfLqspBrh1fp2MgHIDZBIe2pLUyxWSPtg0o
C4VUllvU0Fqla/tnPKWrixuMu30+zDZ6lIknkYk0FieihFjMOjkWYilywTfi5BNPwbszVFOLFuldEiY5
N6jt8W6A7nJPg3G9dRraVpXgEXX6jm1/KGOg8oP020BzEZL7+t7UW2V9yhvYWTke/Yq5B3Gu2vt/GYmj
TRwtBJuqt6S683/yxnxsxH13cxaApp/od8AZ3FIBsqf416fv3JOO8zb6RIXHON1Q6mLSx0qdu3wM/ZgV
nrG6Kixer1ZJ/sDY3wAAAP//TpIqiXIGAAA=
`,
	},

	"/assets/settings.html": {
		local:   "assets/settings.html",
		size:    17000,
		modtime: 1527352507,
		compressed: `
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
t7x4aEIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
