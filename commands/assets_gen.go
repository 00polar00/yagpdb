// Code generated by "esc -o assets_gen.go -pkg commands -ignore .go assets/"; DO NOT EDIT.

package commands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/commands.html": {
		local:   "assets/commands.html",
		size:    11015,
		modtime: 1519321427,
		compressed: `
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
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    4653,
		modtime: 1518359152,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
