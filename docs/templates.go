// Code generated by "esc -o templates.go -pkg docs templates/"; DO NOT EDIT.

package docs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/ads.md": {
		local:   "templates/ads.md",
		size:    691,
		modtime: 1527169000,
		compressed: `
H4sIAAAAAAAC/zxSQW7bMBC86xUDtEBsVHYcI4GBnnrooe65H1hTK4k1xRW4Kyvs6wvSiXngYTkznBny
jMTRIIvBRkaQlRMC9wYnKXKCCUYOM2bK6CVVlBM1SI+0xOjjgEzD3F32OPfIsmClaIVXlW0kg85ibaFG
9MwBfWIuCCfRyBkmbsHeRk6QCJ7IB2z+SiRNp9fTj6EM9k6mLaQifnp1kjpsfhfM6fX05XA4vGz3TfOL
Ez8pVCZGx0Y+aCE8XHxvsMOfmiFakoCZIpd9YMXApqAkS+zwcrjWKW6eV8XMCSvz9UFfUo03J+8YXtH7
d+5Ahpevzx3lFmd0giiGkW4Mihma1XiqLVIHNTJtoYsbQQoXvLvCxiTLMGoLHzEHcozM1kIF3p4UVHyr
lYKLTJR1/+lI/b9q5Ph2eD8e3xqU9a0eJSaVeFfQiUIouAs7WpQ/dMNKWXHz6i+BsblDjcw7CiFjFvXm
JXK3rReeITFkUAiygj6Q8FMprMQrwXc3TnlHMUoun+TmO5bNtBh32+fB958GHz3dxfyuTzSxVpmYbSzc
4K9c33DfNM3/AAAA///DWIAXswIAAA==
`,
	},

	"/templates/customembed.md": {
		local:   "templates/customembed.md",
		size:    1434,
		modtime: 1527169000,
		compressed: `
H4sIAAAAAAAC/6xUwY7bNhC96yum6mXX8ErZdY3UymmDtgEKNA3QXLZxYNHUSGKW4gicoZ2tYV/6E731
F/sJhWh74zUCtAiii4h5o/fePJK6owBaOdAelSDowEIdYLfEiuGiQ2bVIMPaSAuaLHmsgE2FS+Uv99W7
21dvfnhZJEemxqwQpEVYksDPv/36Gozrg4A19/t6TdbS2rimgFak5yLPK8OafKX6PtPU5RWu0FKPnvOK
NOcemYLXyLlulXNov40Gr2j5AbVkSdTu1AMoywSB8ZHYIq0IbdYYacMyM5Tvv1wZDsqaP9DnGbwMAh67
AfEgNKxpdeYVeuUFqI5VCtIHKZKkLMsPTG6TAKSanKCTtIBUWsNQcuh78sIlLBZqsYDRiMOSUUYjGFE9
gt2uU/6+orXb7eCfv//6EyLd3NXBaTHkoCa6iEFv5g5Ak2OymFlqYvXF3G3nbu6GruvLF2VZpuPBSJww
LWAz2Etuh0hOJrKKBbbABNIqASPQKdEtckTjfvGDE/URVKOMy+COggd0FXjkYAW4pWArsET3n9vTT5kk
AACpGLE4hPLLA+zX4z1QIWtv+mHQA3xaOTQFbwfw8+fk2BTPZVrAd9Ob6fPJZHwU7pBFdf1AMJvNZlfX
N1eT67c3k2I6K6az7Pmz738/UtREgj6GBvFJjSa3OJPXlcvOjmoMO1crJcpz/izrXXPgHCzgRznMdhCI
yPbosA3d0iljT3W/TPIJr+lUg1+ZUwVp6UlATnVxX2/3yPgrBPdEsTZoK04LeHdgPiqfaP809AA5LB71
AdKVsiHCb4d7aBjqY1uWHrq24/8ilTX9H1JZ0yfS+H6fDKvh6v34eGkKSL55t/+3xrmzN69fvb/YbFiU
GA3pGZRut5fJvwEAAP//djV3NpoFAAA=
`,
	},

	"/templates/docs.ghtml": {
		local:   "templates/docs.ghtml",
		size:    994,
		modtime: 1527169000,
		compressed: `
H4sIAAAAAAAC/5xSTW+cPBA+v/sr5nUviVQvSs+ES3KpVFU5VOqxmrUHsGJmqG1YrSz+ewULCVn11AtY
9swz83zkbKl2TKCsmKgZRzVNh9K76gAAUCK0gepH9UlVpQPjMcZHVSPUqB3XMv/rs6rKwlXwLGboiBMm
Jwxl7JG3Do8n8rB89RkDO25U9fPrS1nMVdWH2hoBQ5AF9fpa4LrN4LcixhEYRx3JCFvtaSSvqsN/c1nO
AbkhOD6LecGG4jQt7QvExuztAneQ2jt+VSvlYlakyHkI/vdA4QJ3Xs4U4PgdO7qfJlXlvJyn6W3DBbGY
Z6ybENt1evm/1lAcb5cGrVdyxeCrw7V56zvc2NNjQ7M/OSfqeo+JQJn+V0toFRxn46wbNz6LhFfo3a0R
r32jH76o3ca791PUBr2XIcH78d2zD9r9aF0EFyG1BHZv/uflCk0a0IMRrl0zhGssXASWBFaYoKVAR/gm
jWNAthDJk0lwkSFApDBSAMcL1ND3FCC4pk1gJDAFuKvFWwoQL91JPAhDJyfn6X5nhHXjJu5y3H7/plL7
sD3PPuhZdQpLCp6GEIjTmre3ULQPf9e4w/Bq5cz6JPaym5DzHNkn4USc9qF9J3LD5DYJtUiicM3CGqI/
AQAA//+stVcF4gMAAA==
`,
	},

	"/templates/helping-out.md": {
		local:   "templates/helping-out.md",
		size:    3418,
		modtime: 1527169000,
		compressed: `
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
AAA=
`,
	},

	"/templates/index.md": {
		local:   "templates/index.md",
		size:    1674,
		modtime: 1527169000,
		compressed: `
H4sIAAAAAAAC/4xUTW/bOBC9+1cM0kMTwFViu3Hc3JK4+ejmkKbd7bZBgVDSSGIsceghaVkt+t8XQzlu
mu0CexPEmcf3Zt7jx0o70A58hZBTFho0XnlNBgpi+HxycTM/TQaDKy9FWWBG4+sOVsgdaJNRY2v0CMrk
/b+WeAHagGUqGZ0bgiPQBXQUoFXGgyeosLZAwUPL2mtTysVuCLZG5YSFeemhQqe98ij1OYEjIdHD9AWF
NnlkrU1B3PScOwovGaEmWghuQTyUGgNXwJhR06DJI8YDaRO7XbCW2INDXiEPoa10VkGmDKQIBQWTg0pp
hclg8OIFzMkoYbzl8igplwMEYrhLQxeRVf7KWZXh19190bevcrcXewQ8SoLghOWN8oxkhnCqfUb650em
XDWEt75CxtDEGV9rj3J0PBjAq8fOY6i8t+54f79t28T2P5OMmv1OlTZPpXQDeQx396PLkB9dfhrfTu2H
i2BP518W79bLxfm35ccP5YPh/PT+6+737058kMHOktO+N7Gm3PnxY+8J3JlyVYScLz+P31OKBY8ulrfV
YvKlu5mer/6cVKfpt7Yop7+HFIVPYR+1CubB+mA2Ph+pPDsbqdl0mh0dKvV2djYZ43hyMBu9nqmDbHw4
mxw+w8YNyFPg7dzg7v76ejq9Pvljnb95v/xU8uX66O/FyB++cYu381vq8N1fzwDrTfMWcHBGxqvMQ4O/
ejuGyBADUy3OhKaDuXYZcb5xWO+jWxTTyfKvnAvoHv0k5q3USg50PIBW+yripuSHMZO4VhI6UCCGFlMw
+sBGmhw16Cv5qvUCYedc6RpzSJJkp8+BUG10WXm5BgUBQWVMzoGCNJQxLlvKJzdX0KhOorBhZZnSGhs3
FKtL6YRzsIp9F/XpDMFXym+pLQOyRge7ugBluj15Rf4FpY2cQSbpF4KuolDn/5VR2K0pUx5z2Bx7spAq
3osBqTFuZWGoleAGWYp2yWBwUntkSe8K6264DaKqHQFZFAr9zIF62LsL7S9DClaVGAe/2cLX3ce0ldpX
IY1BeyCj3NHro03i9iCu+RyVDywCyhKdvFDbTffzV0+O4h0KDLZQbPqIQTeWaYXyLLu+wgCutYvmIYM/
laAW34OTJ05Bg84J8d+PkPiZZv2rZkZL/0/nk8Ek8LFCqJX3coNB2bVlLJAZ8yE4bTKEK/BC0JN0lhjX
Y0qXwOCfAAAA//9GoFGYigYAAA==
`,
	},

	"/templates/quickstart.md": {
		local:   "templates/quickstart.md",
		size:    1290,
		modtime: 1527169000,
		compressed: `
H4sIAAAAAAAC/3xUTW/cNhC961e8ugfHgCy3TQsYvqUxYAQt2gBOD0HRA0WOJHYpjjocriL/+oJcbbYB
itwIzcd782aemg+TT1jMSFh9CJgoLNg445/s7SFsSKTIC3Qi9Kxd0zyT5uWhab7v8MRQxqS6pIe7u82M
i+u7T9vLHZofOvwea1VeFpJb8eOkt5YlkrSwwdsDOOLqVx59xB/JxxGPPlkWd9W87vDs5yVsCDWca3jj
LOccWCFHUb0JqUWfFY7jtWJlka0tqddCBWDPv05YqU9eCZHXFivBMSIrRlKYuIGHE8AXjUufENAThJwX
skoOHC3VyJFgsk4s/oUcPr55ev/4cxHk6GmtoyeSI0m60OmaHzu8OdfsJUWxUmY5RrJanpWJsZZz1K75
6ata5uhIcJUolGKzg161SCcJ98CFT13vaqKel1qI4TdWesBHzrAmgmPYYJz7nOKrPJjMkTCbWO5l77aQ
zD4lzzF1TfPnh4mE4BNMSAyDo3fE0Kws3gTMxhH6Db/4OL7lXsy39/ffvcY6eTvBcpVr5qRlHwV7IKNZ
KLUofb/569Xna+Osuevp7uXp/j0dlsfbw+Gmac4DRF6LoIMfsxDWySj9d/QOb+sJ6iScx6lCHY14zicz
JJjoQJ+WwEIwCF41UFlNolO7i3jDQFJGf3eSSHKEj8r1qnxKuZD/m/1pgykvC4uexTM9H6mFCTpVHksg
k+ptqmwFbh+AsyJpHob6KueRKAwXYr3XFiZh3qB+Lh2j+wJPyczXaQ/6hOBnr+RaRAbHurCRVIvPFuMd
BhZo+TW88kOZRKcSenc9I3B148yRtuKwiVMtK4gry6G8Odbimw7PvDuz+Gw27nxIl48Gg0kKobRwTASW
4k6lEGqiMoTMaRjHNmHwkrTS2m3VU4GU7Aj/K3ILO5loy06FzkUjx2gqfm9iJHfT/RsAAP//TTPcCwoF
AAA=
`,
	},

	"/templates/templates.md": {
		local:   "templates/templates.md",
		size:    7674,
		modtime: 1527541862,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
